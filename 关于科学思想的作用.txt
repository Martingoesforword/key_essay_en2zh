EWD447
On the role of scientific thought.

关于科学思想的作用。

Essentially, this essay contains nothing new, on the contrary: its subject matter is so old, that sometimes it seems forgotten. It is written in an effort to undo some of the more common misunderstandings that I encounter (nearly daily) in my professional world of computing scientists, programmers, computer users and computer designers, and even colleagues engaged in educational politics. The decision to write this essay now was taken because I suddenly realized that my confrontation with this same pattern of misunderstanding was becoming a regularly itself repeating occurrence.

从本质上讲，这篇文章没有什么新意，相反，它的主题太陈旧了，有时似乎已经被遗忘了。写这篇文章的目的是为了消除我在职业世界中(几乎每天)遇到的一些更常见的误解，这些人包括计算机科学家、程序员、计算机用户和计算机设计师，甚至还有从事教育政治的同事。之所以决定现在写这篇文章，是因为我突然意识到，我与这种同样的误解模式的对抗正在成为一种经常性的重复发生。

Whether the misappreciation of the proper role of scientific thought that I observe within the "computing community" is a phenomenon that is specific for the computing community, or whether it also a current phenomenon in other disciplines, is not for me to judge. One thing seems certain: in the computing community itself we can find enough historical explanation, and we don't need to look for outside influences when we try to understand how the phenomenon came about. (This is not meant to say, that those outside influences have been absent!)

我在“计算界”中观察到的对科学思想的正确角色的误解是计算界特有的现象，还是其他学科中的当前现象，这不是我能判断的。有一件事似乎是肯定的：在计算机界本身，我们可以找到足够的历史解释，当我们试图理解这一现象是如何产生的时，我们不需要寻找外部影响。(这并不是说，这些外部影响已经消失了！)

As we shall see in a moment, the adjective "scientific" when used in the expression "scientific thought" more refers to a way of thinking than to what are the thoughts about: to use the Latin expressions: it refers to the "quo modo" rather than to the "quod". This partly explains why the tradition of scientific thought has only been imported into the computing world to such a limited extent by the many pioneers who immigrated in the early days from other scientific disciplines. The early academics who became involved with computers all had had their training in other scientific disciplines and many of them were quite able to practice "scientific thought" in their original field of intellectual activity. But for a great number of them, that had been the only confrontation with scientific thought. As a result, it is understandable that they associated their notion of scientific thought as much with the specific field in which they had practiced it as with a general way of thinking that could (and should!) be transferred to their new field of activity. In addition, many of them must have felt that scientific thought was a luxury that one could afford in the more established disciplines, but not in the intellectual wilderness they now found themselves in. But, as we shall also see in a short while, scientific thought is not a luxury made possible in established scientific disciplines, on the contrary: it has been the tool that has made the establishment of those disciplines possible!

正如我们稍后将看到的，形容词“科学”用于表达“科学思想”时，更多的是指一种思维方式，而不是思想是什么：用拉丁语表达：它指的是“现状”，而不是“夸德”。这在一定程度上解释了为什么许多早期从其他科学学科移民过来的先驱才在如此有限的程度上将科学思想的传统引入计算机世界。早期接触计算机的学者都曾接受过其他学科的训练，他们中的许多人都能在自己原来的智力活动领域实践“科学思想”。但对他们中的许多人来说，这是与科学思想的唯一对抗。因此，可以理解的是，他们将自己的科学思想概念与他们所实践的具体领域联系在一起，就像与能够(也应该)的一般思维方式联系在一起一样。被调到他们新的活动领域。此外，他们中的许多人肯定认为，科学思想是一种奢侈品，在更成熟的学科中是负担得起的，而不是在他们现在发现自己所处的智力荒野中。但是，正如我们不久将看到的那样，科学思想不是在既定的科学学科中成为可能的奢侈品，相反，它是使这些学科的建立成为可能的工具！

Besides emigrants from other academic fields, the computing world has attracted people from all over the world: businessmen, administrators, operators, musicians, painters, unshaped youngsters, you name it, a vast majority of people with no scientific background at all. By their sheer number they form all by themselves already an explanation for the phenomenon.

除了来自其他学术领域的移民外，计算机界还吸引了来自世界各地的人：商人、行政人员、操作员、音乐家、画家、身材矮小的年轻人，你能想到的，绝大多数人根本没有科学背景。仅凭它们的数量，它们本身就已经构成了对这一现象的一种解释。

To introduce the subject, I would like to quote two paragraphs from a letter that I recently wrote to one of my professional friends.

为了介绍这个话题，我想引用我最近写给我的一位职业朋友的一封信中的两段话。

"Let me try to explain to you, what to my taste is characteristic for all intelligent thinking. It is, that one is willing to study in depth an aspect of one's subject matter in isolation for the sake of its own consistency, all the time knowing that one is occupying oneself only with one of the aspects. We know that a program must be correct and we can study it from that viewpoint only; we also know that it should be efficient and we can study its efficiency on another day, so to speak. In another mood we may ask ourselves whether, and if so: why, the program is desirable. But nothing is gained —on the contrary!— by tackling these various aspects simultaneously. It is what I sometimes have called "the separation of concerns", which, even if not perfectly possible, is yet the only available technique for effective ordering of one's thoughts, that I know of. This is what I mean by "focussing one's attention upon some aspect": it does not mean ignoring the other aspects, it is just doing justice to the fact that from this aspect's point of view, the other is irrelevant. It is being one- and multiple-track minded simultaneously.

“让我试着向你解释一下，我喜欢的东西是所有智慧思维的特征。那就是，一个人愿意为了其自身的一致性而孤立地深入研究他的主题的一个方面，而总是知道他只专注于其中的一个方面。我们知道一个程序必须是正确的，我们只能从这个角度来研究它；我们也知道它应该是有效的，我们可以改天再研究它的效率。在另一种情绪下，我们可能会问自己，如果是这样的话：为什么，这个项目是可取的。但是，同时处理这些不同的方面不会有任何收获--恰恰相反！这就是我有时所说的“关注点分离”，据我所知，这即使不是完全可能的，但也是唯一可以有效地安排一个人的思想的技术。这就是我所说的“专注于某一方面”的意思：并不是忽略了其他方面，而是说从这方面来看，另一方面是无关紧要的。它同时是一条和多条轨道的思想。

"I remember walking with Ria when we were engaged —it was near Amsterdam's Central Station— when I explained to her that I wanted to be glad and happy with my eyes fully open, without fooling myself in the belief that we lived in a pink world: to be happy to be alive in the full knowledge of all misery, our own included...." (End of quotation.)

“我记得我们订婚的时候和瑞亚一起散步--那是在阿姆斯特丹中央车站附近--当时我向她解释说，我想要双眼完全睁开，快乐地活着，而不是自欺欺人地认为我们生活在一个粉红色的世界里：快乐地活着，完全了解所有的苦难，包括我们自己的苦难……”(报价结束。)

Scientific thought comprises "intelligent thinking" as described above. A scientific discipline emerges with the —usually rather slow!— discovery of which aspects can be meaningfully "studied in isolation for the sake of their own consistency", in other words: with the discovery of useful and helpful concepts. Scientific thought comprises in addition the conscious search for the useful and helpful concepts.

科学思维包括如上所述的“智慧思维”。一门科学学科出现的时候--通常相当缓慢！--发现哪些方面可以有意义地“为了它们自身的一致性而孤立地研究”，换句话说，就是发现有用和有用的概念。科学思维还包括有意识地寻找有用和有帮助的概念。

The above should make it clear that I want to discuss the role of scientific thought for the sake of its practical value, that I want to explain my pragmatic appreciation of a tool. It is no slip of the pen that the above quotation refers to the "effective ordering of one's thoughts": the efficiency of our thinking processes is what I am talking about. I stress this pragmatic appreciation because I live in a culture in which much confusion has been created by talking about the so-called "academic virtues" (sic!) with moral, ethical, religious and sometimes even political overtones. Such overtones, however, only confuse the issue. (If you so desire, you may observe here scientific thought in action: I do, for instance, not deny political aspects, I would be a fool if I did so! The anti-intellectualistic backlash against "the technocrats" that is so en vogue today, is inspired by a —largely unjustified— fear for the power of him who really knows how to think and by a —more justified— fear for the actions of him who erroneously believes to know how to think. These political considerations, however, have nothing to contribute to the technical problem of ordering one's thoughts effectively, and that is the problem that I want to discuss "in isolation, for the sake of its own consistency".)

以上应该表明，我想讨论科学思想的作用是为了它的实用价值，我想解释我对一种工具的务实欣赏。上面的引言指的是“思想的有效有序”，这不是纸上谈兵：我们思维过程的效率就是我所说的。我强调这种务实的欣赏，是因为我生活在一种文化中，谈论所谓的“学术美德”(原文如此！)。带有道德、伦理、宗教色彩，有时甚至带有政治色彩。然而，这样的言外之意只会让问题变得混乱。(如果你愿意，你可以在这里观察科学思想在行动中的作用：例如，我不否认政治方面，如果我这样做了，我就是一个傻瓜！对“技术官僚”的反智主义反弹在今天如此盛行，其原因是对真正懂得思考的人的权力感到恐惧(这在很大程度上是没有道理的)，以及对错误地认为知道如何思考的人的行为的恐惧(更有道理)。然而，这些政治上的考虑对有效地安排自己的思想这一技术问题没有任何帮助，这就是我想要单独讨论的问题，“为了它本身的一致性”。)

I intend to describe for your illumination the most common cases in which the "average" computing scientist fails to separate the various concerns; in doing so I hope and trust that my colleagues in the profession do interpret this as an effort to help them, rather than to insult them. For the sake of the non-professional, I shall present the least technical cases first.

我打算描述一些最常见的案例，在这些案例中，“普通”计算科学家无法区分不同的关注点；这样做，我希望并相信我的同行确实将此理解为帮助他们的努力，而不是侮辱他们的努力，以供您参考。为了非专业人士着想，我将首先介绍最少的技术案例。

One of the concerns, the isolation of which seems most often neglected, is the concern for "general acceptance". (In the world of pure mathematics —with which I have some contacts— this problem seems to be fairly absent.) The concern itself is quite legitimate. If nobody reads the poems of a poet that wanted to communicate, this poet has failed, at least as a communicating poet. Similarly, many computing scientists don't just solve problems, but develop tools: theories, techniques, algorithms, software systems and programming languages. And if those, that —they feel— could profit from their designs, prefer to ignore these inventions and to stick to their own, old, rotten routines, the authors get the miserable feeling of failure. Have they? Yes and no. They can adopt the Galileian attitude: "Nothing becomes true because tenthousand people believe it, nor false because tenthousand people refuse to do so.", and can decide to feel themselves, in splendid isolation, superior to their fellow computer scientists for the rest of their lives. I can deny no inventor who feels underappreciated, such a course of action. I don't recommend it either: the sterile pleasure of being right tends to get stale in the course of a lifetime. If one's aim is to design something useful, one should avoid designing something useless, because unused: in other words, I fully accept "general acceptance" as a legitimate concern. We must, however, be willing to ignore this concern temporarily —for a few days or a few years, depending on what we are undertaking— for unwillingness to do so will paralyze us.

其中一个令人担忧的问题是对“普遍接受”的担忧，而孤立似乎是最常被忽视的问题。(在纯数学领域--我与之有一些接触--这个问题似乎相当不存在。)。这种担忧本身是相当合理的。如果没有人读一位想要交流的诗人的诗，那么这位诗人就失败了，至少作为一名交流的诗人是这样。同样，许多计算科学家不仅解决问题，还开发工具：理论、技术、算法、软件系统和编程语言。如果那些他们认为可以从他们的设计中获益的人，宁愿忽略这些发明，而坚持自己的陈旧、腐烂的惯例，那么作者就会有一种悲惨的失败感。是吗？是也不是。他们可以采取伽利略式的态度：“没有什么是真的，因为一万人相信它，也不会因为一万人拒绝这样做而变得虚假。”，他们可以决定在绝妙的与世隔绝中，在余生中感觉自己比其他计算机科学家优越。我不能否认任何发明家都会觉得自己被低估了，这是一种行为。我也不推荐这样做：正确带来的无菌快感往往会在一生中变得陈腐。如果一个人的目标是设计有用的东西，他应该避免设计无用的东西，因为没有人使用：换句话说，我完全接受“普遍接受”作为一个合理的考虑。然而，我们必须愿意暂时忽视这一关切--根据我们正在进行的工作，暂时忽视几天或几年--因为不愿意这样做会使我们瘫痪。

Some time ago I visited the computing center of a large research laboratory where they were expecting new computing equipment of such a radically different architecture, that my colleagues had concluded that a new programming language was needed for it if the potential concurrency were to be exploited to any appreciable degree. But they got their language design never started because they felt that their product should be so much like FORTRAN that the casual user would hardly notice the difference "for otherwise our users won't accept it". They circumvented the problem of explaining to their user community how the new equipment could be used at best advantage by failing to discover what they should explain. It was a rather depressing visit....

前段时间，我访问了一家大型研究实验室的计算中心，他们在那里期待着新的计算设备具有如此截然不同的体系结构，以至于我的同事们得出结论，如果要将潜在的并发性开发到任何可察觉的程度，就需要一种新的编程语言。但是他们没有开始他们的语言设计，因为他们觉得他们的产品应该非常像FORTRAN，以至于普通用户几乎不会注意到其中的区别，否则我们的用户不会接受它。他们绕过了向他们的用户社区解释如何最大限度地利用新设备的问题，因为他们没有发现他们应该解释什么。这是一次相当令人沮丧的访问……

The proper technique is clearly to postpone the concerns for general acceptance until you have reached a result of such a quality that it deserves acceptance. It is the significance of your message that should justify the care that you give to its presentation, it may be its "unusualness" that makes extra care necessary. And, secondly, what is "general"? Has Albert Einstein failed because the Theory of Relativity is too difficult for the average highschool student?

很明显，正确的技巧是推迟让人们普遍接受的问题，直到你达到了这样一种品质的结果，它值得被接受。这是你的信息的重要性，应该证明你对它的呈现给予的关注是合理的，可能是它的“不同寻常”使额外的关注变得必要。其次，什么是“一般”？阿尔伯特·爱因斯坦之所以失败，是因为相对论对普通高中生来说太难了吗？

Another separation of concerns that is very commonly neglected is the one between correctness and desirability of a software system. Over the last years I have lectured for all sorts of audiences about the techniques that may assist us in designing programs such that one can prove a priori that they meet their specifications. One of the standard objections raised from the floor is along the following lines: "What you have shown is very nice for the little mathematical examples with which you illustrated the techniques, but we are afraid that they are not applicable in the world of business data processing, where the problems are much harder, because there one always has to work with imperfect and ambiguous specifications." From a logical point of view, this objection is nonsense: if your specifications are contradictory, life is very easy, for then you know that no program will satisfy them, so, make "no program"; if your specifications are ambiguous, the greater the ambiguity, the easier the specifications are to satisfy (if the specifications are absolutely ambiguous, every program will satisfy them!).

另一个经常被忽视的关注点分离是软件系统的正确性和可取性之间的分离。在过去的几年里，我为各种各样的观众讲授了一些技术，这些技术可以帮助我们设计程序，这样人们就可以先验地证明它们符合他们的规格。发言中提出的标准反对意见之一是这样的：“您所展示的内容非常适合您用来说明技术的数学小例子，但我们担心它们不适用于商业数据处理领域，因为在商业数据处理领域，问题要难得多，因为人们总是不得不处理不完美和模棱两可的规范。”从逻辑的角度来看，这种反对意见是无稽之谈：如果您的规范相互矛盾，那么生活就非常简单，因为您知道没有程序可以满足它们，所以，设置为“无程序”；如果您的规范含糊不清，那么歧义越大，规范就越容易满足(如果规范是绝对不明确的，那么每个程序都会满足它们！)。

Pointing that out, however, seldom satisfies the man who raised the objection. What he meant, of course, was something different. He meant something along the following lines: "We make something with the best of intentions in the hope of satisfying a need as we understand it, but when our product has been put into action, it does not perform satisfactorily and how are we to discover whether we have correctly made the wrong thing or whether there is just a silly bug somewhere?". The point is that that this question is empty as long as the specifications do not define — are not accepted to define by definition — what the system is supposed to do. It is like asking the judge to settle a business dispute caused by the absence of a contract stating the mutual rights and obligations. It is the sole purpose of the specifications to act as the interface between the system's users and the system's builders. The task of "making a thing satisfying our needs" as a single responsibility is split into two parts "stating the properties of a thing, by virtue of which it would satisfy our needs" and "making a thing guaranteed to have the stated properties". Business data processing systems are sufficiently complicated to require such a separation of concerns and the suggestion that in that part of the computing world "scientific thought is a non-applicable luxury" puts the cart before the horse: the mess they are in has been caused by too much unscientific thought.

然而，指出这一点很难让提出异议的人满意。当然，他的意思是不同的东西。他的意思是这样的：“我们做一些东西是出于好意，希望能满足我们所理解的需要，但当我们的产品付诸实施后，效果并不令人满意，我们如何才能发现我们做错了东西，还是只是一个愚蠢的错误？”问题的关键在于，只要规范没有定义(不接受通过定义来定义系统应该做什么)，这个问题就是空洞的。这就像要求法官解决因没有合同说明双方的权利和义务而引起的商业纠纷一样。规范的唯一目的是充当系统用户和系统构建者之间的接口。作为一项单一的责任，“制造满足我们需要的东西”的任务被分成两部分：“说明事物的属性，借以满足我们的需要”和“制造保证具有所声明的属性的事物”。商业数据处理系统足够复杂，需要这样的关注点分离，而认为在计算机界的那个领域，“科学思想是一种不适用的奢侈品”的说法是本末倒置的：它们所处的困境是由太多不科学的思想造成的。

But from the above, please don't conclude that unscientific thought is restricted to the business world! In Departments of Computing Science, one of the most common confusions is the one between a program and its execution, between a programming language and its implementation. I always find this very amazing: the whole vocabulary to make the distinction is generally available, and also, the very similar confusion between and computer and its order code, remarkably enough, is quite rare. But it is a deep confusion of long standing. One of the oldest examples is presented by the LISP 1.5 Manual: halfway their description of the programming language LISP, its authors give up and from then onwards try to complement their incomplete language definition by an equally incomplete sketch of a specific implementation. Needless to say, I have not been able to learn LISP from that booklet! I would not worry, if the confusion were restricted to old documents, but, regretfully enough, the confusion is still very popular. At an international summer school in 1973, a very well-known professor of Computing Science made the statement that "ALGOL 60 was a very inefficient language", while what he really meant was that with the equipment available to him, he and his people had not been able to implement ALGOL 60 efficiently. (That is what he meant, he did not mean to say it!) Another fairly well-known professor of computing science has repeatedly argued in public that there is no point in proving the correctness of one's programs written in a higher-level language "because, how do you know that its compiler is correct?". In the motivation of a recent research proposal doubt is cast upon the adequacy of "the axiomatic semantics approach" as it may lead to deductive systems that are "undesirable in that they may not accurately reflect the actual executions of programs". It is like casting doubt on Peano's Axiomatization of the Natural Numbers on the ground that some people make mistakes when they try to do an addition!

但综上所述，请不要得出不科学的想法仅限于商业世界的结论！在计算科学系中，最常见的混淆之一是程序和它的执行之间、编程语言和它的实现之间的混淆。我总是发现这一点非常令人惊讶：用来区分的全部词汇都是普遍可用的，而且，非常相似的计算机和它的顺序代码之间非常相似的混淆，值得注意的是，相当罕见。但这是一个由来已久的深深的困惑。LISP 1.5手册提供了一个最古老的例子：在描述编程语言LISP的过程中，其作者放弃了，并从那时起试图用同样不完整的具体实现草图来补充他们不完整的语言定义。不用说，我还没能从那本小册子上学到LISP呢！如果混淆仅限于旧文件，我不会担心，但遗憾的是，混淆仍然非常普遍。1973年，在一次国际暑期学校上，一位非常著名的计算科学教授说：“ALGOL 60是一种非常低效的语言”，而他真正的意思是，由于他和他的人有可用的设备，他和他的人无法有效地实现ALGOL 60。(这就是他的意思，他不是故意这么说的！)。另一位相当知名的计算科学教授曾多次公开辩称，证明一个人用高级语言编写的程序的正确性是没有意义的，“因为，你怎么知道它的编译器是正确的？”在最近一项研究提案的动机中，人们对“公理语义学方法”的充分性提出了质疑，因为它可能导致演绎系统“不受欢迎，因为它们可能不能准确地反映程序的实际执行情况”。这就像是质疑皮亚诺的自然数公理化，理由是有些人在做加法时会犯错！

On the one hand we have the physical equipment (the implementation), on the other hand we have the formal system (programming language). It is perhaps a question of taste —I don't believe so— to whom of the two we give the primacy, that is whether it is the task of the formal system to give an accurate description of (certain aspects of) the physical equipment, or whether it is the task of the physical equipment to provide an accurate model for the formal system —and I prefer the latter—. But under no circumstance we should confuse the two!

一方面我们有物理设备(实现)，另一方面我们有正式的系统(编程语言)。这可能是一个品味问题--我不这么认为--我们把两者中的哪一个放在首位，也就是说，是正式系统的任务是准确地描述物理设备(某些方面)，还是物理设备的任务是为正式系统提供准确的模型--我更喜欢后者--这是一个品味问题--我不这么认为--也就是说，是正式系统的任务是对物理设备(某些方面)的准确描述，还是物理设备的任务是为正式系统提供准确的模型--我更喜欢后者。但在任何情况下，我们都不能把这两者混为一谈！

I have —I think— very good reasons for my preference, because if I cannot appreciate a formal system for the sake of its own consistency, but must view it as a description of physical equipment, I could not deal with a programming language that has not been implemented! (And that is, for instance, exactly what a language designer has to do.)

我有-我认为-非常好的理由来支持我的偏好，因为如果我不能欣赏一个正式的系统，因为它本身的一致性，但必须把它看作是对物理设备的描述，我就不能处理一种没有实现的编程语言！(例如，这正是语言设计者必须做的事情。)

The confusion is perhaps most clearly demonstrated by the often expressed opinion that "one cannot use a programming language that has not been implemented". But this is nonsense, of course one can! One can use any well-defined programming language, whether implemented or not, for writing programs in; it is only when you want to use those programs to evoke computations, that you need an implementation as well. Being well-defined, rather than being implemented, is a programming language's vital characteristic.

这种困惑可能最清楚地体现在经常表达的一种观点上，即“一个人不能使用尚未实现的编程语言”。但这是胡说八道，当然可以！人们可以使用任何定义良好的编程语言，无论是否实现，都可以用来编写程序；只有当您想要使用这些程序进行计算时，您才需要实现。编程语言的重要特征是定义良好，而不是被实现。

The above remarks are no jokes, nor puns, on the contrary: they are pertinent to multi-million-dollar mistakes. They imply for instance that the development projects —erroneously called "research projects"— aiming at the production of "natural language programming systems" —currently en vogue again— are chasing their own tails.

上述言论不是开玩笑，也不是双关语：它们与数百万美元的错误有关。例如，他们暗示，开发项目--被错误地称为“研究项目”--旨在生产“自然语言编程系统”--目前再次流行起来--正在追赶自己的尾巴。

Note (which I hate to add, because it is nearly an insult to my readers, whom its inclusion accuses of possible superficiality). I have not said that when considering a programming language, one should not care about its implementability: one had better! But also this concern, no matter how serious, is one we should try to isolate.(End of note.)

注(我不想补充这一点，因为它几乎是对我的读者的侮辱，因为它的收录指责读者可能很肤浅)。我并没有说过，当考虑一种编程语言时，人们不应该关心它的可实现性：最好是这样！但是，无论这种担忧有多严重，我们都应该试着把它隔离开来。

In my opening paragraph I also mentioned colleagues engaged in educational politics. The writing of this essay was, as a matter of fact, also prompted by a recent study of two Computing Science Curricula at university level. They were from different sides of the Atlantic Ocean, but shockingly similar in two respects: unbelievably elaborate budgets and a total lack of understanding of what constitutes a scientific discipline.

A scientific discipline separates a fraction of human knowledge from the rest: we have to do so, because, compared with what could be known, we have very, very small heads. It also separates a fraction of the human abilities from the rest; again, we have to do so, because the maintenance of our non-trivial abilities requires that they are exercised daily and a day —regretfully enough— has only 24 hours. (This explains, why the capable are always busy.)

But of course, any odd collection of scraps of knowledge and an arbitrary bunch of abilities, both of the proper amount, do not constitute a scientific discipline: for the separation to be meaningful, we have also an internal and an external requirement. The internal requirement is one of coherence: the knowledge must support the abilities and the abilities must enable us to improve the knowledge. The external requirement is one of what I usually call "a thin interface"; the more self-supporting such an intellectual subuniverse, the less detailed the knowledge that its practitioners need about other areas of human endeavour, the greater its viability. In the terminology of the computing scientist I should perhaps call our scientific disciplines "the natural intellectual modules of our culture". (When the layman asks the computing scientist, what is meant by "Modularization", a reference to the way in which the knowledge in the world has been arranged, is probably the best concise answer.)

In view of the preceding it becomes quite obvious why many earlier efforts to concoct Computing Science Curricula at our universities have been such dismal failures. They were just cocktails! For lack of other ingredients, they tried to combine scraps of knowledge from the most diverse fields that seemed to have some relation to the phenomenon Computer. That the ingredients of the cocktail did not mix into a coherent whole, is not surprising; that the cocktail did not taste too well, is not surprising either.

In those early days, the only alternative was waiting, as for instance still in 1969 urged by Strachey: "I am quite convinced that in fact computing will become a very important science. But at the moment we are in a very primitive state of development; we don't know the basic principles yet and we must learn them first. If universities spend their time teaching the state of the art, they will not discover these principles and that, surely, is what academics should be doing." I could not agree more.

Now, of course, one can argue whether five years later we computing scientists have enough of sufficiently lasting value that can be "studied in isolation, for the sake of its consistency". I think that now we have enough to start, but if you think Strachey's advice still appropriate now, you have my full sympathy.

The two recent(!) curriculum proposals I just referred to, however, presented the old cocktail as if absolutely nothing had happened, and, not as a timid first step, but as the final goal..... And when scientists no longer know, what science is supposed to be about, we are in bad shape. Hence this essay.

30th August 1974
Burroughs
Plataanstraat 5
NUENEN - 4565 The Netherlands	prof.dr.Edsger W.Dijkstra
Burroughs Research Fellow
Transcribed by Richard Walker.

Last revised on Mon, 25 Oct 2010.
